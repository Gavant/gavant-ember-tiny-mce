{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/integration/components/tinymce-editor-test.js","dummy/tests/lint/app.lint-test.js","dummy/tests/lint/tests.lint-test.js","dummy/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/integration/components/tinymce-editor-test\", [\"@ember/test-helpers\", \"ember-qunit\", \"@gavant/ember-tinymce/components/tinymce-editor\", \"qunit\"], function (_testHelpers, _emberQunit, _tinymceEditor, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | tinymce-editor', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Can render initial text', async function (assert) {\n      const done = assert.async();\n      const text = '<p>Such wow, Much fun</p>';\n\n      const onInit = (_event, instance) => {\n        assert.equal(instance.getContent(), text);\n        done();\n      };\n\n      this.set('onInit', onInit);\n      this.set('text', text);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <TinymceEditor @onInit={{this.onInit}} @value={{this.text}}/>\n      */\n      {\n        \"id\": \"ZFLLH5OG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"tinymce-editor\\\",[],[[\\\"@onInit\\\",\\\"@value\\\"],[[32,0,[\\\"onInit\\\"]],[32,0,[\\\"text\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"meta\": {}\n      }));\n    });\n    (0, _qunit.test)('Can render toolbar and plugins', async function (assert) {\n      const plugins = [_tinymceEditor.TinymceEditorPlugins.EMOTICONS];\n      this.set('plugins', plugins);\n      const toolbar = [_tinymceEditor.TinymceEditorPlugins.EMOTICONS];\n      this.set('toolbar', toolbar);\n      const done = assert.async();\n\n      const onInit = () => {\n        const emoticonsButton = this.element.querySelector('.tox-toolbar__group')?.querySelector('[aria-label=Emoticons]');\n        assert.ok(emoticonsButton !== null && emoticonsButton !== undefined);\n        done();\n      };\n\n      this.set('onInit', onInit);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <TinymceEditor @plugins={{this.plugins}} @toolbar={{this.toolbar}} @onInit={{this.onInit}}/>\n      */\n      {\n        \"id\": \"ktVDVRY1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"tinymce-editor\\\",[],[[\\\"@plugins\\\",\\\"@toolbar\\\",\\\"@onInit\\\"],[[32,0,[\\\"plugins\\\"]],[32,0,[\\\"toolbar\\\"]],[32,0,[\\\"onInit\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"meta\": {}\n      }));\n    });\n  });\n});","define(\"dummy/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}